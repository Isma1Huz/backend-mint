# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
image: php:7.4-fpm
variables:
  AWS_REGION: "us-east-1"
  EC2_HOST: "ec2-54-227-87-65.compute-1.amazonaws.com"

services:
  - mysql:5.7

stages:
  - build
  - test
  - deploy

before_script:
  - apt-get update -yqq
  - apt-get install -yqq git unzip
  - docker-php-ext-install mysqli
  - curl -sS https://getcomposer.org/installer | php
  - mv composer.phar /usr/local/bin/composer

build:
  stage: build
  script:
    - composer install --optimize-autoloader --ignore-platform-req=ext-gd --ignore-platform-req=ext-zip
    - cp .env.example .env
    - php artisan key:generate
    - export MYSQL_ROOT_PASSWORD=myntadmin23
    - export MYSQL_DATABASE=database-3
    - export MYSQL_USER=admin
    - export MYSQL_PASSWORD=myntadmin23
    # - php artisan config:cache
    # - php artisan route:cache

test:
  stage: test
  script:
    - composer update --optimize-autoloader --ignore-platform-req=ext-gd --ignore-platform-req=ext-zip
    - cp .env.example .env
    - php artisan key:generate
    - php vendor/bin/phpunit --version
    - php vendor/bin/phpunit -v --coverage-text --colors=never --stderr --coverage-cobertura=codecoverage.xml --log-junit junit-report.xml



deploy:
  stage: deploy
  script:
    # - cd ../
    # - rm -rf ~/.ssh
    # - mkdir ~/.ssh
    # - ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
    # - eval $(ssh-agent -s)
    # - ssh-add ~/.ssh/id_rsa
    # - cat ~/.ssh/id_rsa.pub
    # - echo -e "Host gitlab.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' >  ~/.ssh/id_rsa
    # - chmod 600 ~/.ssh/id_rsa
    # - apt-get install openssh-client -y
    # - mkdir -p ~/.ssh
    # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    # - chmod 700 ~/.ssh
    # - chmod 600 ~/.ssh/id_rsa
    # - ls ~/.ssh
    # - cat ~/.ssh/id_rsa
    # - ssh-keyscan $EC2_HOST >> ~/.ssh/known_hosts
    # - ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$EC2_HOST
    # - ssh -T ec2-user@ec2-54-227-87-65.compute-1.amazonaws.com
    - apt-get update -y && apt-get install awscli -y
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure set default.region us-east-1
    # - ssh -i "$mynt_api_pem" ec2-user@ec2-54-227-87-65.compute-1.amazonaws.com
    # - ssh -i StrictHostKeyChecking=no "$mynt_api_pem" ec2-user@ec2-54-227-87-65.compute-1.amazonaws.com
    # - ssh -i "$mynt_api_pem" ec2-user@ec2-54-227-87-65.compute-1.amazonaws.com
    # - echo "$mynt_api_pem"
    # - cat $mynt_api_pem
    # - echo "$SSH_PRIVATE_KEY" > my_cert.pem
    # - chmod 600 my_cert.pem
    # - ssh -i my_cert.pem -o StrictHostKeyChecking=no ec2-user@ec2-54-227-87-65.compute-1.amazonaws.com
    - git pull origin main
    - apt-get update  -yqq
    # - apt -y install software-properties-common
    # - add-apt-repository ppa:ondrej/php
    # - add-apt-repository --remove ppa:webupd8team/ppa
    # - apt update
    # - rm /etc/apt/sources.list.d/ondrej-php-*
    # - apt -y install software-properties-common 
    # - add-apt-repository ppa:ondrej/php
    # - add-apt-repository ppa:ondrej/php-qa
    # - docker-php-ext-install mysqli
    # - apt-get install --reinstall apache2 apache2-utils -y
    # - service apache2 restart
    # - echo "operating System $(uname -a)"
    # - apt-get install php-mysqli
    # - add-apt-repository --remove ppa:ondrej/php
    # - apt-get update
    # - apt-get --purge autoremove
    # - apt-get update -yqq
    # Prep for Node
    - apt-get install gnupg -yqq
    # Upgrade to Node8
    # - curl -sL https://deb.nodesource.com/setup_8.x | bash -
    # Install dependencies
    - apt-get install git nodejs libcurl4-gnutls-dev libicu-dev libonig-dev libmcrypt-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev libldap2-dev unixodbc-dev libpq-dev libsqlite3-dev libaspell-dev libsnmp-dev libpcre3-dev libtidy-dev -yqq
    # Install php extensions
    - docker-php-ext-install mbstring pdo_mysql curl json intl gd xml bz2 opcache 
    # Install & enable Xdebug for code coverage reports
    # - pecl install xdebug
    # - docker-php-ext-enable xdebug

    - apt-get update
    - composer install --optimize-autoloader --ignore-platform-req=ext-gd --ignore-platform-req=ext-zip
    - cp .env.example .env

    - php artisan key:generate
    - php artisan cache:clear
    - php artisan config:clear  
    - php artisan migrate
  only:
    - main

